<div class="container-fluid" id="anagram-list">

    <div data-bind="template: 'recoveryErrors'"></div>

    <script id="recoveryErrors" type="text/html">
        <!-- ko foreach: recoveryErrors -->
        <div class="alert alert-danger">
            <a href="#" class="close" data-bind="click: $parent.clearRecoveryError">&times;</a>
            Error when recovering from approval error for match <strong data-bind="text: anagramMatch.id"></strong>:<br>
            <strong>Base error:</strong> <span data-bind="text: error"></span><br>
            <strong>Recovery error:</strong> <span data-bind="text: recoveryError"></span><br>
            <a data-bind="attr: { href : anagramMatch.t1Link }">tweet 1 link</a>
            <a data-bind="attr: { href : anagramMatch.t2Link }">tweet 2 link</a>
        </div>
        <!-- /ko -->

        <!-- ko if: recoveryErrors().length -->
        <div class="container">
            <button type="button" class="btn btn-warning" data-bind="click: clearAllRecoveryErrors">Clear all recovery
                errors
            </button>
        </div>
        <br>
        <!-- /ko -->
    </script>

    <div class="row row-fluid col-sm-12 well well-sm">
        <h5>Match query types:</h5>
        <div class="col-sm-6">
            <div class="btn-group" data-toggle="buttons">
                <label class="btn btn-primary">
                    <input type="radio" name="query" value="topmatches" data-bind="bsChecked: matchQuery" id="option1">
                    Top matches
                </label>
                <label class="btn btn-primary">
                    <input type="radio" name="query" value="oldesttopmatches" data-bind="bsChecked: matchQuery"
                           id="option2">
                    Oldest top matches
                </label>
                <label class="btn btn-primary">
                    <input type="radio" name="query" value="mostrecentmatches" data-bind="bsChecked: matchQuery"
                           id="option3">
                    Most recent matches
                </label>
            </div>
        </div>
        <div class="col-sm-6" data-bind="visible: matchQuery() == 'oldesttopmatches'">
            <label for="oldestMatchesQueryInterestingFactor">Oldest matches IF: </label>
            <input id="oldestMatchesQueryInterestingFactor" type="number" min="0" max="1.0" step="0.01" data-bind="value: oldestTopMatchesCutoff"/>
        </div>
    </div>
    <div class="row col-sm-12 well well-sm">
        <div class="btn-group col-sm-8">
            <h5>Other stuff:</h5>
            <a href="ratelimits" class="btn btn-primary" role="button">Rate Limits</a>
            <a href="statistics" class="btn btn-primary" role="button">Statistics</a>
            <a href="unretweetmanually" class="btn btn-primary" role="button">Unretweet</a>
            <a href="unrejectmanually" class="btn btn-primary" role="button">Unreject</a>
            <a href="queuestatus" class="btn btn-primary" role="button">Queue Status</a>
            <a href="nwaymatches" class="btn btn-primary" role="button">N-way Matches</a>
        </div>
        <div class="col-sm-4">
            <h5>Bulk actions (CAREFUL!):</h5>
            <div class="col-sm-6">
                <form action="bulkpostmissingtumblrposts" method="post">
                    <button type="submit" class="btn btn-primary">tumblr missing posts</button>
                </form>
            </div>
        </div>
    </div>

    <div data-bind="template: 'matchesTable'"></div>

    <script id="matchesTable" type="text/html">
        <table class="table table-hover table-condensed">
            <thead>
            <tr>
                <th>score</th>
                <th></th>
                <th>tweets</th>
                <th>reject</th>
                <th>approve</th>
                <th>enqueue</th>
            </tr>
            </thead>
            <tbody data-bind="template: { foreach: anagramMatches, beforeRemove: hideMatchRow }">

            <tr data-bind="attr: { id: id }">
                <td class="col-md-1">
                    <a href="#/" data-bind="text: interestingFactor, click: $parent.showMatchDetails"></a>
                </td>
                <td class="col-md-1">
                    <a data-bind="attr: { href : t1Link }">[link]</a>
                    <a data-bind="attr: { href : t1InfoLink }">[info]</a>
                    <br><br>
                    <a data-bind="attr: { href : t2Link }">[link]</a>
                    <a data-bind="attr: { href : t2InfoLink }">[info]</a>
                </td>
                <td class="col-md-5">
                    <span data-bind="text: t1OriginalText"></span>
                    <br><br>
                    <span data-bind="text: t2OriginalText"></span>
                </td>
                <td class="col-md-1">
                    <button type="submit" class="btn btn-danger"
                            data-bind="click: $parent.rejectMatch, attr: { 'data-match': id }">✘
                    </button>
                </td>
                <td class="col-md-2">
                    <button type="submit" class="btn btn-success" title="approve in order as shown"
                            data-bind="click: $parent.approveMatchAsShownOrder, attr: { 'data-match': id }">⇉
                    </button>
                    <button type="submit" class="btn btn-success" title="approve in reverse order"
                            data-bind="click: $parent.approveMatchReverseOrder, attr: { 'data-match': id }">⤮
                    </button>
                </td>
                <td class="col-md-2">
                    <button type="submit" class="btn btn-info" title="enqueue in order as shown"
                            data-bind="click: $parent.enqueueMatchAsShownOrder, attr: { 'data-match': id }">⇉
                    </button>
                    <button type="submit" class="btn btn-info" title="enqueue in reverse order"
                            data-bind="click: $parent.enqueueMatchReverseOrder, attr: { 'data-match': id }">⤮
                    </button>
                </td>
            </tr>

            </tbody>
        </table>
    </script>

</div>

<script>

    let vm;

    $(() => {

        let AnagramViewModel = function () {

            let AnagramMatch = function (tweetRow) {
                this.id = tweetRow.id;
                this.interestingFactor = tweetRow.interesting.toFixed(2);
                this.t1OriginalText = tweetRow.t1_originaltext;
                this.t1StatusId = tweetRow.t1_statusid;
                this.t1Username = tweetRow.t1_username;
                this.t2OriginalText = tweetRow.t2_originaltext;
                this.t2StatusId = tweetRow.t2_statusid;
                this.t2Username = tweetRow.t2_username;
                this.t1Link = `http://twitter.com/${this.t1Username}/status/${this.t1StatusId}`;
                this.t2Link = `http://twitter.com/${this.t2Username}/status/${this.t2StatusId}`;
                this.t1InfoLink = `/tweets/info/${tweetRow.t1_id}`;
                this.t2InfoLink = `/tweets/info/${tweetRow.t2_id}`;
                return this;
            };

            let recoveryErrorIdSeed = 1;
            let RecoveryError = function (error, recoveryError, anagramMatch) {
                this.id = recoveryErrorIdSeed++;
                this.error = error;
                this.recoveryError = recoveryError;
                this.anagramMatch = anagramMatch;
                return this;
            };

            this.matchQuery = ko.observable("oldesttopmatches");
            this.anagramMatches = ko.observableArray();
            this.recoveryErrors = ko.observableArray();
            this.oldestTopMatchesCutoff = ko.observable({{defaultInterestingFactor}})
                    .extend({ rateLimit: { timeout: 500, method: "notifyWhenChangesStop" } })
                    .extend({ precision: 2 });

            this.rejectMatch = anagramMatchToReject => {
                this.hitEndPoint(`/anagrams/reject/${anagramMatchToReject.id}`, anagramMatchToReject);
            };

            this.approveMatchAsShownOrder = anagramMatchToApprove => this.approveMatch(anagramMatchToApprove, true);
            this.approveMatchReverseOrder = anagramMatchToApprove => this.approveMatch(anagramMatchToApprove, false);
            this.enqueueMatchAsShownOrder = anagramMatchToEnqueue => this.enqueueMatch(anagramMatchToEnqueue, true);
            this.enqueueMatchReverseOrder = anagramMatchToEnqueue => this.enqueueMatch(anagramMatchToEnqueue, false);

            this.approveMatch = (anagramMatchToApprove, orderAsShown) => {
                const params = { orderAsShown: orderAsShown };
                this.hitEndPoint(`/anagrams/approve/${anagramMatchToApprove.id}`, anagramMatchToApprove, params);
            };

            this.enqueueMatch = (anagramMatchToApprove, orderAsShown) => {
                const params = { orderAsShown: orderAsShown };
                this.hitEndPoint(`/anagrams/enqueue/${anagramMatchToApprove.id}`, anagramMatchToApprove, params);
            };

            this.hitEndPoint = function (endPoint, affectedMatch, data) {
                let $buttons = $(`[data-match=${affectedMatch.id}]`);
                $buttons.prop("disabled", true);
                $.post(endPoint, data).done(data => {
                    if (data.error) {

                        let msg = data.error;
                        if (data.systemResponse) {
                            msg += " " + data.systemResponse;
                        }
                        $.growl.error({title: '', message: msg});

                        if (data.recoveryError) {
                            let recoveryError = new RecoveryError(data.error, data.systemResponse, affectedMatch);
                            this.recoveryErrors.push(recoveryError);
                        }
                    }
                    if (data.successMessage) {
                        $.growl({title: '', style: 'notice', message: data.successMessage});
                    }
                    if (data.tumblrError) {
                        $.growl.error({title: '', message: data.tumblrError});
                    }
                    if (data.remove) {
                        this.anagramMatches.remove(match => match.id === affectedMatch.id);
                        this.getMoreMatchesIfListIsRunningLow();
                    }
                }).fail((jqxhr, textStatus, error) => {
                    $.growl.error({title: '', message: error});
                }).always(() => {
                    $buttons.prop("disabled", false);
                });
            };

            this.clearAllRecoveryErrors = function () {
                this.recoveryErrors([]);
            };

            this.clearRecoveryError = (recoveryError) => {
                this.recoveryErrors.remove((error) => error.id == recoveryError.id);
            };

            this.getMoreAnagrams = function () {
                return new Promise((resolve, reject) => {
                    const params = {};
                    if (this.matchQuery() == "oldesttopmatches") {
                        params.cutoff = this.oldestTopMatchesCutoff();
                    }

                    $.getJSON(`/anagrams/more/${this.matchQuery()}`, params).done(data => {
                        if (data.anagramMatches) {
                            const anagramMatches = data.anagramMatches.map(x => new AnagramMatch(x));
                            return resolve(anagramMatches);
                        } else if (data.error) {
                            return reject(data.error);
                        } else {
                            return reject("unknown error when retrieving tweets");
                        }
                    }).fail((jqxhr, textStatus, error) => {
                        return reject(error);
                    });
                });
            };

            this.getMoreMatchesIfListIsRunningLow = function () {
                if (this.anagramMatches().length < 5) {
                    return this.getMoreAnagrams().then(moreAnagramMatches => {
                        const newMatches = _.differenceBy(moreAnagramMatches, this.anagramMatches(), x => x.id);
                        this.anagramMatches.push(...newMatches);
                    }).catch(error => {
                        $.growl.error({message: error});
                        console.log(error);
                    });
                } else {
                    return Promise.resolve(false);
                }
            };

            this.seedData = function () {
                this.getMoreAnagrams().then(seedAnagramMatches => {
                    this.anagramMatches.push(...seedAnagramMatches);
                }).catch(error => {
                    $.growl.error({message: error});
                    console.log(error);
                });
            };

            this.clearAllMatches = function () {
                this.anagramMatches([]);
            };

            this.seedData();

            this.matchQuery.subscribe(() => {
                this.clearAllMatches();
                this.seedData();
            });

            this.oldestTopMatchesCutoff.subscribe(() => {
                this.clearAllMatches();
                this.seedData();
            });

            this.hideMatchRow = function (elem) {
                $(elem).children('td, th')
                        .animate({padding: 0}, 300)
                        .wrapInner('<div />')
                        .children()
                        .slideUp(200, function () {
                            $(this).closest('tr').remove();
                        });
            };

            this.poll = function() {
                setTimeout(() => {
                    this.getMoreMatchesIfListIsRunningLow().then(x => {
                        this.poll();
                    });
                }, 30000);
            };
            this.poll();

            this.showMatchDetails = function(match) {
                anagrams.showScorePopUp(match.id);
            };

            return this;
        };

        vm = new AnagramViewModel();
        ko.applyBindings(vm, document.getElementById('anagram-list'));
    });

    ko.bindingHandlers.bsChecked = {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            const value = valueAccessor();
            const newValueAccessor = function () {
                return {
                    change: function () {
                        value(element.value);
                    }
                }
            };
            ko.bindingHandlers.event.init(element, newValueAccessor, allBindingsAccessor, viewModel, bindingContext);
        },
        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            if ($(element).val() == ko.unwrap(valueAccessor())) {
                setTimeout(function () {
                    $(element).closest('.btn').button('toggle');
                }, 1);
            }
        }
    };

    ko.extenders.precision = function(target, precision) {
        const result = ko.dependentObservable({
            read: function() {
                return parseFloat(target()).toFixed(precision);
            },
            write: target
        });

        result.raw = target;
        return result;
    };

</script>
