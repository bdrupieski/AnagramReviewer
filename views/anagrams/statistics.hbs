<div class="container-fluid">

    <h4>Stats parameters:</h4>

    <div class="row">
        <form action="statistics" method="post">
            <div class="col-sm-1">
                <button type="submit" class="btn btn-primary btn-sm">Reload</button>
            </div>
            <div class="col-sm-3">
                <div class="input-group input-group-sm">
                    <span class="input-group-addon">Interesting Factor Cutoff</span>
                    <input type="number" class="form-control" data-fraction-digits="2" name="interestingfactor" step="0.01" min="0" max="1" value="{{stats.interestingFactorCutoff}}">
                </div>
            </div>
            <div class="col-sm-3">
                <div class="input-group input-group-sm">
                    <span class="input-group-addon">Days</span>
                    <input type="number" class="form-control" min="1" max="10000" name="days" value="{{stats.numberOfDaysToGetMatchesPerDay}}">
                </div>
            </div>
            <div class="col-sm-3">
                <div class="input-group input-group-sm">
                    <span class="input-group-addon">Minute Interval</span>
                    <input type="number" class="form-control" min="1" max="60" name="minutes" value="{{stats.minuteInterval}}">
                </div>
            </div>
        </form>
    </div>

    <h3>Important</h3>
    <div class="row">
        There

        {{#if stats.countOfNotRejectedAndNotApprovedMatchesAboveCutoffIsOne}}
            is
        {{else}}
            are
        {{/if}}

        <strong>{{formatNumber stats.countOfNotRejectedAndNotApprovedMatchesAboveCutoff}}</strong>

        {{#if stats.countOfNotRejectedAndNotApprovedMatchesAboveCutoffIsOne}}
            match
        {{else}}
            matches
        {{/if}}

        with an interesting factor above <strong>{{formatNumber stats.interestingFactorCutoff minimumFractionDigits="2" maximumFractionDigits="2"}}</strong> that

        {{#if stats.countOfNotRejectedAndNotApprovedMatchesAboveCutoffIsOne}}
            is
        {{else}}
            are
        {{/if}}

        not rejected, not retweeted, and not posted to tumblr.
    </div>
    <div class="row">
        There

        {{#if stats.countOfPendingQueuedMatchesIsOne}}
            is
        {{else}}
            are
        {{/if}}

        <strong>{{formatNumber stats.countOfPendingQueuedMatches}}</strong>

        {{#if stats.countOfPendingQueuedMatchesIsOne}}
            match
        {{else}}
            matches
        {{/if}}

        <a href="/anagrams/queuestatus">queued</a> to be posted.
    </div>
    <h3>Fun</h3>
    <div class="row">
        There are <strong>{{formatNumber stats.countOfMatches}}</strong> total matches over approximately
        <a href="#"
           id="exact-tweet-popover"
           data-html="true"
           data-placement="top"
           data-toggle="popover"
           data-trigger="focus"
           title="Exact number of tweets"
           data-content="<span id='exact-tweet-number'><img src='/images/loader.gif'></img></span>">
                {{formatNumber stats.approximateCountOfTweets}}</strong></a> tweets.
        That's about <strong>{{formatNumber stats.tweetsPerMatch maximumFractionDigits="0"}}</strong> tweets per match!
    </div>
    <div class="row">
        There are <strong>{{formatNumber stats.countOfMatchesAboveCutoff}}</strong> matches with an interesting factor
        above
        <strong>{{formatNumber stats.interestingFactorCutoff minimumFractionDigits="2" maximumFractionDigits="2"}}</strong>.
    </div>
    <div class="row">
        <strong>{{formatNumber stats.countOfRetweetedMatches}}</strong> matches have been retweeted.
        There should be <strong>{{stats.countOfRetweetedTweets}}</strong> retweeted tweets.
    </div>
    <div class="row">
        <strong>{{formatNumber stats.sumRetweetedMatchesOverPastDays}}</strong> matches have been retweeted over the past
            <strong>{{formatNumber stats.numberOfDaysToGetMatchesPerDay}}</strong> days for an average of
            <strong>{{formatNumber stats.averageRetweetedMatchesPerDay maximumFractionDigits="1"}}</strong> matches/day retweeted.
    </div>
    <div class="row">
        <strong>{{formatNumber stats.countOfRejectedMatches}}</strong> matches have been rejected.
    </div>
    <div class="row">
        The most recent match was created <strong>{{formatRelative stats.dateLastMatchCreated}}</strong> at
        <strong>{{formatTime stats.dateLastMatchCreated hour="numeric" minute="numeric"}}</strong> on
        <strong>{{formatTime stats.dateLastMatchCreated day="numeric" month="long" year="numeric" }}</strong>.
    </div>

    <h3>
        <button class="btn btn-sm btn-info js-collapse-button" data-toggle="collapse" data-target="#retweets-and-tumblr-posts-by-day-table"></button>
        Retweets and Tumblr posts made by day for the past <strong>{{stats.numberOfDaysToGetMatchesPerDay}}</strong> days:
    </h3>
    <div class="row">
        <div id="retweets-and-tumblr-posts-by-day-table" class="col-md-7 collapse in"></div>

        <script id="retweets-and-tumblr-posts-by-day-table-template" type="text/x-handlebars-template">
            <table class="table table-hover table-condensed js-sticky-header">
                <thead>
                <tr>
                    <th>Day</th>
                    <th>Retweets</th>
                    <th>Retweets Average Interesting Factor</th>
                    <th>Tumblr posts</th>
                    <th>Tumblr Average Interesting Factor</th>
                </tr>
                </thead>
                <tbody>
                \{{#each rows}}
                <tr>
                    <td>\{{formatTime day day="numeric" month="numeric" year="numeric"}}</td>
                    <td>\{{retweeted}}</td>
                    <td>\{{safeFormatNumber retweetedAverageInterestingFactor minimumFractionDigits="2" maximumFractionDigits="2"}}</td>
                    <td>\{{postedToTumblr}}</td>
                    <td>\{{safeFormatNumber postedToTumblrAverageInterestingFactor minimumFractionDigits="2" maximumFractionDigits="2"}}</td>
                </tr>
                \{{/each}}
                </tbody>
            </table>
        </script>
    </div>

    <h3>Retweets and Tumblr posts made by day for the past <strong>{{stats.numberOfDaysToGetMatchesPerDay}}</strong> days:</h3>
    <div class="row">
        <svg id="retweets-and-tumblr-posts-by-day-chart" height="400"></svg>
    </div>

    <h3>
        <button class="btn btn-sm btn-info js-collapse-button" data-toggle="collapse" data-target="#stats-by-date-created-table"></button>
        Stats by date match created for the past <strong>{{stats.numberOfDaysToGetMatchesPerDay}}</strong> days:
    </h3>
    <div id="stats-by-date-created-table" class="row collapse in col-md-12"></div>

    <script id="stats-by-date-created-table-template" type="text/x-handlebars-template">
        <table class="table table-hover table-condensed js-sticky-header">
            <thead>
            <tr>
                <th>Day</th>
                <th>Matches created</th>
                <th>Average Interesting Factor</th>
                <th>Attempted Approval</th>
                <th>Attempted Approval Average Interesting Factor</th>
                <th>Auto-rejected</th>
                <th>Retweeted</th>
                <th>Unretweeted</th>
                <th>Rejected</th>
                <th>Rejected Average Interesting Factor</th>
                <th>Tumblr</th>
                <th>Unreviewed</th>
                <th>Unreviewed Average Interesting Factor</th>
                <th>% Unreviewed</th>
                <th>% Retweeted</th>
                <th>% Approval Failure</th>
            </tr>
            </thead>
            <tbody>
            \{{#each rows}}
                <tr>
                    <td>\{{formatTime day day="numeric" month="numeric" year="numeric"}}</td>
                    <td>\{{matchesCreated}}</td>
                    <td>
                        <a href='#' data-show-interesting-factor-distrubution data-match-created='\{{day}}'>
                            \{{safeFormatNumber averageInterestingFactor minimumFractionDigits="2" maximumFractionDigits="2"}}
                        </a>
                    </td>
                    <td>\{{attemptedApproval}}</td>
                    <td>\{{safeFormatNumber attemptedApprovalAverageInterestingFactor minimumFractionDigits="2" maximumFractionDigits="2"}}</td>
                    <td>\{{autoRejected}}</td>
                    <td>\{{retweeted}}</td>
                    <td>\{{unretweeted}}</td>
                    <td>\{{rejected}}</td>
                    <td>\{{safeFormatNumber rejectedAverageInterestingFactor minimumFractionDigits="2" maximumFractionDigits="2"}}</td>
                    <td>\{{postedToTumblr}}</td>
                    <td>\{{unreviewed}}</td>
                    <td>\{{safeFormatNumber unreviewedAverageInterestingFactor minimumFractionDigits="2" maximumFractionDigits="2"}}</td>
                    <td>\{{safeFormatNumber percentUnreviewed style="percent"}}</td>
                    <td>\{{safeFormatNumber percentRetweeted style="percent"}}</td>
                    <td>\{{safeFormatNumber percentApprovalFailure style="percent"}}</td>
                </tr>
            \{{/each}}
            </tbody>
        </table>
    </script>

    <h3>Percent retweeted and unreviewed relative to total matches:</h3>
    <div class="row">
        <svg id="percent-reviewed-unreviewed-by-date-created-chart" height="400"></svg>
    </div>
    <h3>Counts of things that happened by date match created:</h3>
    <div class="row">
        <svg id="counts-by-date-created-chart" height="400"></svg>
    </div>
    <h3>Percent approval failure out of all approval attempts:</h3>
    <div class="row">
        <svg id="percent-approval-failure-by-date-created-chart" height="400"></svg>
    </div>
    <h3>Average interesting factor by action:</h3>
    <div class="row">
        <svg id="average-interesting-factor-by-action-taken-chart" height="400"></svg>
    </div>

    <h3>
        <button class="btn btn-sm btn-info js-collapse-button" data-toggle="collapse" data-target="#stats-by-score-table"></button>
        Stats by interesting factor bucket:
    </h3>
    <div id="stats-by-score-table" class="row collapse in js-sticky-header"></div>

    <script id="stats-by-score-table-template" type="text/x-handlebars-template">
        <table class="table table-hover table-condensed">
            <thead>
            <tr>
                <th>Interesting Factor</th>
                <th>Total matches</th>
                <th>Attempted Approval</th>
                <th>Auto-rejected</th>
                <th>Retweeted</th>
                <th>Unretweeted</th>
                <th>Rejected</th>
                <th>Tumblr</th>
                <th>Unreviewed</th>
                <th>% Unreviewed</th>
                <th>% Retweeted</th>
            </tr>
            </thead>
            <tbody>
            \{{#each rows}}
                <tr>
                    <td>\{{safeFormatNumber score minimumFractionDigits="2"}}</td>
                    <td>\{{matchesCreated}}</td>
                    <td>\{{attemptedApproval}}</td>
                    <td>\{{autoRejected}}</td>
                    <td>\{{retweeted}}</td>
                    <td>\{{unretweeted}}</td>
                    <td>\{{rejected}}</td>
                    <td>\{{postedToTumblr}}</td>
                    <td>\{{unreviewed}}</td>
                    <td>\{{safeFormatNumber percentUnreviewed style="percent"}}</td>
                    <td>\{{safeFormatNumber percentRetweeted style="percent"}}</td>
                </tr>
            \{{/each}}
            </tbody>
        </table>
    </script>

    <h3>Percent retweeted and unreviewed by interesting factor bucket:</h3>
    <div class="row">
        <svg id="reviewed-unreviewed-by-score-bucket-chart" height="400"></svg>
    </div>
    <h3>Totals by interesting factor bucket:</h3>
    <div class="row">
        <svg id="totals-by-score-bucket-chart" height="400"></svg>
    </div>

    <h3>
        <button class="btn btn-sm btn-info js-collapse-button" data-toggle="collapse"
                data-target="#stats-by-time-of-day-match-created-table"></button>
        Stats by time of day match created:
    </h3>

    <div id="stats-by-time-of-day-match-created-table" class="row collapse in col-md-12"></div>

    <script id="stats-by-time-of-day-match-created-table-template" type="text/x-handlebars-template">
        <table class="table table-hover table-condensed js-sticky-header">
            <thead>
            <tr>
                <th>Time of Day</th>
                <th>Total matches</th>
                <th>Average Interesting Factor</th>
                <th>Attempted Approval</th>
                <th>Attempted Approval Average Interesting Factor</th>
                <th>Auto-rejected</th>
                <th>Retweeted</th>
                <th>Unretweeted</th>
                <th>Rejected</th>
                <th>Rejected Average Interesting Factor</th>
                <th>Tumblr</th>
                <th>Unreviewed</th>
                <th>Unreviewed Average Interesting Factor</th>
                <th>% Unreviewed</th>
                <th>% Retweeted</th>
            </tr>
            </thead>
            <tbody>
            \{{#each rows}}
            <tr>
                <td>\{{formatTime timeOfDay hour="numeric" minute="numeric"}}</td>
                <td>\{{matchesCreated}}</td>
                <td>\{{safeFormatNumber averageInterestingFactor minimumFractionDigits="2" maximumFractionDigits="2"}}</td>
                <td>\{{attemptedApproval}}</td>
                <td>\{{safeFormatNumber attemptedApprovalAverageInterestingFactor minimumFractionDigits="2" maximumFractionDigits="2"}}</td>
                <td>\{{autoRejected}}</td>
                <td>\{{retweeted}}</td>
                <td>\{{unretweeted}}</td>
                <td>\{{rejected}}</td>
                <td>\{{safeFormatNumber rejectedAverageInterestingFactor minimumFractionDigits="2" maximumFractionDigits="2"}}</td>
                <td>\{{postedToTumblr}}</td>
                <td>\{{unreviewed}}</td>
                <td>\{{safeFormatNumber unreviewedAverageInterestingFactor minimumFractionDigits="2" maximumFractionDigits="2"}}</td>
                <td>\{{safeFormatNumber percentUnreviewed style="percent"}}</td>
                <td>\{{safeFormatNumber percentRetweeted style="percent"}}</td>
            </tr>
            \{{/each}}
            </tbody>
        </table>
    </script>

    <h3>Totals by time of day match created:</h3>
    <div class="row">
        <svg id="totals-by-time-of-day-match-created-chart" height="400"></svg>
    </div>

    <h3>Average interesting factor by time of day match created:</h3>
    <div class="row">
        <svg id="average-interesting-factor-by-time-of-day-match-created-chart" height="400"></svg>
    </div>

    <div class="modal fade" id="interesting-factors-for-day-chart-modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span>&times;</span>
                    </button>
                    <h4 class="modal-title">Interesting Factor distribution for <span
                            id="interesting-factors-for-day-chart-modal-title"></span></h4>
                </div>
                <div class="modal-body">
                    <svg id="interesting-factors-for-day-chart" height="400"></svg>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

</div>

<script>
    $(() => {

        function safeFormatNumber(num, format, options) {
            if (num === null || num === undefined) {
                return new Handlebars.SafeString("");
            } else {
                return Handlebars.helpers.formatNumber(num, format, options);
            }
        }
        Handlebars.registerHelper('safeFormatNumber', safeFormatNumber);

        const defaultPropValueIsZeroHandler = {
            get: (target, name) => {
                return name in target ? target[name] : 0;
            }
        };

        Date.prototype.addDays = function(days) {
            const theDate = new Date(this.valueOf());
            theDate.setDate(theDate.getDate() + days);
            return theDate;
        };

        function getAllDatesBetween(startDate, stopDate) {
            const dateArray = [];
            let currentDate = startDate;
            while (currentDate <= stopDate) {
                dateArray.push(new Date(currentDate));
                currentDate = currentDate.addDays(1);
            }
            return dateArray;
        }

        function fillInMissingDays(data, dateKeySelector, valueSelector, missingValueSelector) {

            const dataByDay = new Map(data.map(x => [dateKeySelector(x).toDateString(), valueSelector(x)]));
            const dates = data.map(x => dateKeySelector(x));

            const firstDay = new Date(Math.min(...dates));
            const lastDay = new Date(Math.max(...dates));
            const contiguousDates = getAllDatesBetween(firstDay, lastDay);

            return contiguousDates.map(x => {
                if (dataByDay.has(x.toDateString())) {
                    return dataByDay.get(x.toDateString());
                } else {
                    return missingValueSelector(x);
                }
            });
        }

        function dateSeriesByProperty(data, ySelector) {
            return data.map(row => {
                return {x: row.day, y: ySelector(row)}
            });
        }

        function timeSeriesByProperty(data, ySelector) {
            return data.map(row => {
                return {x: row.timeOfDay, y: ySelector(row)}
            });
        }

        function scoreSeriesByProperty(data, ySelector) {
            return data.map(row => {
                return {x: row.score, y: ySelector(row)}
            });
        }

        class StatsByDateMatchPosted {
            constructor(row) {
                this.day = new Date(row.day);
                this.retweeted = Number(row.retweeted);
                this.retweetedAverageInterestingFactor = row.average_interesting_factor_retweeted || null;
                this.postedToTumblr = Number(row.posted_to_tumblr);
                this.postedToTumblrAverageInterestingFactor = row.average_interesting_factor_tumblr || null;
            }

            static defaultPropValueHandler() {

                const nullProps = [
                    'retweetedAverageInterestingFactor',
                    'postedToTumblrAverageInterestingFactor',
                ];

                return {
                    get: (target, name) => {
                        if (name in target) {
                            return target[name];
                        } else if (nullProps.includes(name)) {
                            return null;
                        } else {
                            return 0;
                        }
                    }
                };
            }
        }

        class StatsByDateMatchPostedSeriesCollection {
            constructor(statsByDateMatchPostedCollection) {
                const stats = statsByDateMatchPostedCollection;

                this.retweeted = dateSeriesByProperty(stats, x => x.retweeted);
                this.retweetedAverageInterestingFactor = dateSeriesByProperty(stats, x => x.retweetedAverageInterestingFactor);
                this.postedToTumblr = dateSeriesByProperty(stats, x => x.postedToTumblr);
                this.postedToTumblrAverageInterestingFactor = dateSeriesByProperty(stats, x => x.postedToTumblrAverageInterestingFactor);
            }
        }

        class StatsByDateMatchCreated {
            constructor(row) {
                this.day = new Date(row.day);
                this.matchesCreated = Number(row.matches_created);
                this.attemptedApproval = Number(row.attempted_approval);
                this.autoRejected = Number(row.auto_rejected);
                this.retweeted = Number(row.retweeted);
                this.unretweeted = Number(row.unretweeted);
                this.rejected = Number(row.rejected);
                this.postedToTumblr = Number(row.posted_to_tumblr);
                this.unreviewed = Number(row.unreviewed);
                this.averageInterestingFactor = row.average_interesting_factor;
                this.attemptedApprovalAverageInterestingFactor = row.attempted_approval_average_interesting_factor;
                this.rejectedAverageInterestingFactor = row.rejected_average_interesting_factor;
                this.unreviewedAverageInterestingFactor = row.unreviewed_average_interesting_factor;

                this.percentUnreviewed = this.unreviewed / this.matchesCreated;
                this.percentRetweeted = this.retweeted / this.matchesCreated;

                const countOfAdditionalTumblrPostsMadeBecauseAMatchContainedAnAlreadyRetweetedTweet = this.postedToTumblr - this.retweeted;
                const numberOfAttemptedApprovalsNotCountingKnownUnretweetableMatches =
                        this.attemptedApproval - countOfAdditionalTumblrPostsMadeBecauseAMatchContainedAnAlreadyRetweetedTweet;

                this.adjustedFailedAttemptedApprovals = numberOfAttemptedApprovalsNotCountingKnownUnretweetableMatches - this.retweeted;
                this.percentApprovalFailure = (1 - (this.retweeted / numberOfAttemptedApprovalsNotCountingKnownUnretweetableMatches)) || 0;
            }

            static defaultPropValueHandler() {

                const nullProps = [
                    'averageInterestingFactor',
                    'attemptedApprovalAverageInterestingFactor',
                    'rejectedAverageInterestingFactor',
                    'unreviewedAverageInterestingFactor',
                    'percentUnreviewed',
                    'percentRetweeted',
                    'percentApprovalFailure'
                ];

                return {
                    get: (target, name) => {
                        if (name in target) {
                            return target[name];
                        } else if (nullProps.includes(name)) {
                            return null;
                        } else {
                            return 0;
                        }
                    }
                };
            }
        }

        class StatsByDateMatchCreatedSeriesCollection {
            constructor(statsByDayMatchCreatedCollection) {

                const stats = statsByDayMatchCreatedCollection;

                this.matchesCreated = dateSeriesByProperty(stats, x => x.matchesCreated);
                this.attemptedApproval = dateSeriesByProperty(stats, x => x.attemptedApproval);
                this.autoRejected = dateSeriesByProperty(stats, x => x.autoRejected);
                this.retweeted = dateSeriesByProperty(stats, x => x.retweeted);
                this.unretweeted = dateSeriesByProperty(stats, x => x.unretweeted);
                this.rejected = dateSeriesByProperty(stats, x => x.rejected);
                this.postedToTumblr = dateSeriesByProperty(stats, x => x.postedToTumblr);
                this.unreviewed = dateSeriesByProperty(stats, x => x.unreviewed);
                this.adjustedFailedAttemptedApprovals = dateSeriesByProperty(stats, x => x.adjustedFailedAttemptedApprovals);
                this.averageInterestingFactor = dateSeriesByProperty(stats, x => x.averageInterestingFactor);
                this.attemptedApprovalAverageInterestingFactor = dateSeriesByProperty(stats, x => x.attemptedApprovalAverageInterestingFactor);
                this.rejectedAverageInterestingFactor = dateSeriesByProperty(stats, x => x.rejectedAverageInterestingFactor);
                this.unreviewedAverageInterestingFactor = dateSeriesByProperty(stats, x => x.unreviewedAverageInterestingFactor);

                this.percentUnreviewed = dateSeriesByProperty(stats, x => x.percentUnreviewed);
                this.percentRetweeted = dateSeriesByProperty(stats, x => x.percentRetweeted);
                this.percentApprovalFailure = dateSeriesByProperty(stats, x => x.percentApprovalFailure);
            }
        }

        class StatsByTimeOfDayMatchCreated {
            constructor(row) {

                const timeOfDay = new Date(0);
                timeOfDay.setHours(row.time_of_day.hours || 0);
                timeOfDay.setMinutes(row.time_of_day.minutes || 0);

                this.timeOfDay = timeOfDay.getTime();

                this.matchesCreated = Number(row.matches_created);
                this.attemptedApproval = Number(row.attempted_approval);
                this.autoRejected = Number(row.auto_rejected);
                this.retweeted = Number(row.retweeted);
                this.unretweeted = Number(row.unretweeted);
                this.rejected = Number(row.rejected);
                this.postedToTumblr = Number(row.posted_to_tumblr);
                this.unreviewed = Number(row.unreviewed);
                this.averageInterestingFactor = row.average_interesting_factor;
                this.attemptedApprovalAverageInterestingFactor = row.attempted_approval_average_interesting_factor;
                this.rejectedAverageInterestingFactor = row.rejected_average_interesting_factor;
                this.unreviewedAverageInterestingFactor = row.unreviewed_average_interesting_factor;

                this.percentUnreviewed = this.unreviewed / this.matchesCreated;
                this.percentRetweeted = this.retweeted / this.matchesCreated;

                const countOfAdditionalTumblrPostsMadeBecauseAMatchContainedAnAlreadyRetweetedTweet = this.postedToTumblr - this.retweeted;
                const numberOfAttemptedApprovalsNotCountingKnownUnretweetableMatches =
                        this.attemptedApproval - countOfAdditionalTumblrPostsMadeBecauseAMatchContainedAnAlreadyRetweetedTweet;

                this.adjustedFailedAttemptedApprovals = numberOfAttemptedApprovalsNotCountingKnownUnretweetableMatches - this.retweeted;
                this.percentApprovalFailure = (1 - (this.retweeted / numberOfAttemptedApprovalsNotCountingKnownUnretweetableMatches)) || 0;
            }
        }

        class StatsByTimeOfDayMatchCreatedSeriesCollection {
            constructor(statsByTimeOfDayMatchCreatedCollection) {

                const stats = statsByTimeOfDayMatchCreatedCollection;

                this.matchesCreated = timeSeriesByProperty(stats, x => x.matchesCreated);
                this.attemptedApproval = timeSeriesByProperty(stats, x => x.attemptedApproval);
                this.autoRejected = timeSeriesByProperty(stats, x => x.autoRejected);
                this.retweeted = timeSeriesByProperty(stats, x => x.retweeted);
                this.unretweeted = timeSeriesByProperty(stats, x => x.unretweeted);
                this.rejected = timeSeriesByProperty(stats, x => x.rejected);
                this.postedToTumblr = timeSeriesByProperty(stats, x => x.postedToTumblr);
                this.unreviewed = timeSeriesByProperty(stats, x => x.unreviewed);
                this.adjustedFailedAttemptedApprovals = timeSeriesByProperty(stats, x => x.adjustedFailedAttemptedApprovals);
                this.averageInterestingFactor = timeSeriesByProperty(stats, x => x.averageInterestingFactor);
                this.attemptedApprovalAverageInterestingFactor = timeSeriesByProperty(stats, x => x.attemptedApprovalAverageInterestingFactor);
                this.rejectedAverageInterestingFactor = timeSeriesByProperty(stats, x => x.rejectedAverageInterestingFactor);
                this.unreviewedAverageInterestingFactor = timeSeriesByProperty(stats, x => x.unreviewedAverageInterestingFactor);

                this.percentUnreviewed = timeSeriesByProperty(stats, x => x.percentUnreviewed);
                this.percentRetweeted = timeSeriesByProperty(stats, x => x.percentRetweeted);
                this.percentApprovalFailure = timeSeriesByProperty(stats, x => x.percentApprovalFailure);
            }
        }

        class StatsByScoreBucket {
            constructor(row) {
                this.score = Number(row.score);
                this.matchesCreated = Number(row.matches_created);
                this.attemptedApproval = Number(row.attempted_approval);
                this.autoRejected = Number(row.auto_rejected);
                this.retweeted = Number(row.retweeted);
                this.unretweeted = Number(row.unretweeted);
                this.rejected = Number(row.rejected);
                this.postedToTumblr = Number(row.posted_to_tumblr);
                this.unreviewed = Number(row.unreviewed);

                this.percentUnreviewed = (this.unreviewed / this.matchesCreated) || 0;
                this.percentRetweeted = (this.retweeted / this.matchesCreated) || 0;
            }
        }

        class StatsByScoreBucketSeriesCollection {
            constructor(statsByScoreBucketCollection) {

                const stats = statsByScoreBucketCollection;

                this.matchesCreated = scoreSeriesByProperty(stats, x => x.matchesCreated);
                this.attemptedApproval = scoreSeriesByProperty(stats, x => x.attemptedApproval);
                this.autoRejected = scoreSeriesByProperty(stats, x => x.autoRejected);
                this.retweeted = scoreSeriesByProperty(stats, x => x.retweeted);
                this.unretweeted = scoreSeriesByProperty(stats, x => x.unretweeted);
                this.rejected = scoreSeriesByProperty(stats, x => x.rejected);
                this.postedToTumblr = scoreSeriesByProperty(stats, x => x.postedToTumblr);
                this.unreviewed = scoreSeriesByProperty(stats, x => x.unreviewed);

                this.percentUnreviewed = scoreSeriesByProperty(stats, x => x.percentUnreviewed);
                this.percentRetweeted = scoreSeriesByProperty(stats, x => x.percentRetweeted);
            }
        }

        class InterestingFactorsForDay {
            constructor(row) {
                this.score = Number(row.interesting_factor);
                this.total = Number(row.total);
                this.rejected = Number(row.rejected);
                this.unreviewed = Number(row.unreviewed);
                this.reviewed = this.total - this.rejected - this.unreviewed;
            }
        }

        class InterestingFactorsForDaySeriesCollection {
            constructor(interestingFactorsForDay) {

                const scores = interestingFactorsForDay;

                this.total = scoreSeriesByProperty(scores, x => x.total);
                this.rejected = scoreSeriesByProperty(scores, x => x.rejected);
                this.unreviewed = scoreSeriesByProperty(scores, x => x.unreviewed);
                this.reviewed = scoreSeriesByProperty(scores, x => x.reviewed);
            }
        }

        function buildStatsByDateMatchPosted() {
            const stats = JSON.parse('{{{stats.retweetsAndTumblrByDayJson}}}')
                    .map(x => new StatsByDateMatchPosted(x));
            const statsWithDaysFilledIn = fillInMissingDays(stats, row => row.day, row => row,
                    day => new Proxy({day: day}, StatsByDateMatchPosted.defaultPropValueHandler()));
            return {
                series: new StatsByDateMatchPostedSeriesCollection(statsWithDaysFilledIn),
                stats: [...statsWithDaysFilledIn].reverse()
            };
        }

        function buildStatsByDateMatchCreated() {
            const stats = JSON.parse('{{{stats.statsByDateMatchCreatedJson}}}')
                    .map(x => new StatsByDateMatchCreated(x));
            const statsWithDaysFilledIn = fillInMissingDays(stats, row => row.day, row => row,
                    day => new Proxy({day: day}, StatsByDateMatchCreated.defaultPropValueHandler()));
            return {
                series: new StatsByDateMatchCreatedSeriesCollection(statsWithDaysFilledIn),
                stats: [...statsWithDaysFilledIn].reverse()
            };
        }

        function buildStatsByTimeOfDayMatchCreated() {
            const stats = JSON.parse('{{{stats.statsByTimeOfDayMatchCreatedJson}}}')
                    .map(x => new StatsByTimeOfDayMatchCreated(x));
            return {
                series: new StatsByTimeOfDayMatchCreatedSeriesCollection(stats),
                stats: stats
            };
        }

        function buildStatsByScoreBucket() {
            const stats = JSON.parse('{{{stats.statsByInterestingFactorBucketJson}}}')
                    .map(x => new StatsByScoreBucket(x)).reverse();

            const lastBucket = () => stats[stats.length - 1];
            while (lastBucket().score != 1.0) {
                stats.push(new Proxy({score: lastBucket().score + 0.01}, defaultPropValueIsZeroHandler));
            }
            return {
                series: new StatsByScoreBucketSeriesCollection(stats),
                stats: [...stats].reverse()
            };
        }

        function buildChartRetweetsAndTumblrPostsByDay(dayStats, cssSelector) {
            const data = [{
                values: dayStats.postedToTumblr,
                key: 'Tumblr',
                type: 'bar',
                yAxis: 1,
            }, {
                values: dayStats.retweeted,
                key: 'Retweeted',
                type: 'bar',
                yAxis: 1,
            }, {
                values: dayStats.retweetedAverageInterestingFactor,
                key: "Retweeted IF",
                type: 'line',
                yAxis: 2,
            }, {
                values: dayStats.postedToTumblrAverageInterestingFactor,
                key: "Tumblr IF",
                type: 'line',
                yAxis: 2,
            }];

            const highestYAxis1Value = Math.max(
                    _.maxBy(dayStats.postedToTumblr, row => row.y).y,
                    _.maxBy(dayStats.retweeted, row => row.y).y
                    );

            nv.addGraph(() => {
                const chart = nv.models.multiChart()
                        .options({
                            duration: 300
                        })
                        .margin({right: 80, bottom: 70})
                        .color(d3.scale.category10().range())
                        .yDomain1([0, highestYAxis1Value + 1]);

                chart.xAxis.axisLabel("Date")
                        .tickFormat((d) => {
                            return d3.time.format('%x')(new Date(d));
                        });
                chart.yAxis1.axisLabel('Count').tickFormat((d) => {
                    // hack to get around chart.tooltip.valueFormatter not seeming to work for multiChart
                    let format = 'i';
                    if (d < 1 && d > 0) {
                        format = '.2f';
                    }
                    return d3.format(format)(d);
                });
                chart.yAxis2.axisLabel('Interesting Factor').tickFormat(d3.format('.2f'));

                d3.select(cssSelector).datum(data).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });
        }

        function buildChartDateMatchCreatedPercentApprovalFailure(dayStats, cssSelector) {
            const data = [{
                values: dayStats.percentApprovalFailure,
                key: 'Approval Failure',
                color: '#FF0000'
            }];

            nv.addGraph(() => {

                const chart = nv.models.lineWithFocusChart()
                                .options({
                                    useInteractiveGuideline: true,
                                    duration: 300,
                                })
                                .margin({bottom: 50, right: 70})
                                .yDomain([0, 1]);

                chart.xAxis.axisLabel("Date")
                        .tickFormat((d) => {
                            return d3.time.format('%x')(new Date(d))
                        });
                chart.x2Axis.tickFormat((d) => {
                    return d3.time.format('%x')(new Date(d))
                });

                chart.yAxis.axisLabel('Percent')
                        .tickFormat((d) => {
                            if (d == null) {
                                return 'N/A';
                            }
                            return d3.format('.2%')(d);
                        })
                        .ticks(4);
                chart.y2Axis
                        .tickFormat((d) => {
                            if (d == null) {
                                return 'N/A';
                            }
                            return d3.format('.2%')(d);
                        });

                d3.select(cssSelector).datum(data).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });
        }

        function buildChartRetweetedAndUnreviewedByDateMatchCreated(dayStats, cssSelector) {
            const data = [{
                values: dayStats.percentUnreviewed,
                key: "Unreviewed",
            }, {
                values: dayStats.percentRetweeted,
                key: 'Retweeted',
            }];

            nv.addGraph(() => {
                const chart = nv.models.lineWithFocusChart()
                                .options({
                                    useInteractiveGuideline: true,
                                    duration: 300,
                                    forceY: [0, 1],
                                })
                                .color(d3.scale.category10().range())
                                .margin({bottom: 50, right: 70});

                chart.xAxis.axisLabel("Date")
                        .tickFormat((d) => {
                            return d3.time.format('%x')(new Date(d))
                        });
                chart.x2Axis.tickFormat((d) => {
                    return d3.time.format('%x')(new Date(d))
                });

                chart.yAxis.axisLabel('Percent')
                        .tickFormat((d) => {
                            if (d == null) {
                                return 'N/A';
                            }
                            return d3.format('.2%')(d);
                        })
                        .ticks(4);
                chart.y2Axis.tickFormat((d) => {
                            if (d == null) {
                                return 'N/A';
                            }
                            return d3.format('.2%')(d);
                        });

                d3.select(cssSelector).datum(data).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });
        }

        function buildChartDateMatchCreatedCounts(dayStats, cssSelector) {
            const data = [{
                values: dayStats.unreviewed,
                key: 'Unreviewed',
            }, {
                values: dayStats.retweeted,
                key: 'Retweeted'
            }, {
                values: dayStats.matchesCreated,
                key: "Created",
            }, {
                values: dayStats.adjustedFailedAttemptedApprovals,
                key: 'Failed Attempted Approvals'
            }];

            nv.addGraph(() => {
                const chart = nv.models.multiBarChart()
                        .options({
                            duration: 300
                        })
                        .stacked(true)
                        .margin({right: 50, bottom: 70})
                        .color(d3.scale.category10().range());

                chart.xAxis.axisLabel("Date")
                        .tickFormat((d) => {
                            return d3.time.format('%x')(new Date(d))
                        })
                        .ticks(10);
                chart.yAxis
                        .axisLabel('Count')
                        .tickFormat(d3.format('i'))
                        .ticks(5);
                d3.select(cssSelector).datum(data).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });
        }

        function buildChartDayMatchCreatedAverageInterestingFactor(scoreStats, cssSelector) {
            const data = [{
                values: scoreStats.averageInterestingFactor,
                key: 'All',
            }, {
                values: scoreStats.attemptedApprovalAverageInterestingFactor,
                key: 'Attempted Approval'
            }, {
                values: scoreStats.rejectedAverageInterestingFactor,
                key: "Rejected",
            }, {
                values: scoreStats.unreviewedAverageInterestingFactor,
                key: 'Unreviewed'
            }];

            nv.addGraph(() => {
                const chart = nv.models.lineWithFocusChart()
                                .options({
                                    useInteractiveGuideline : true,
                                    duration: 300,
                                })
                                .color(d3.scale.category10().range())
                                .margin({bottom: 50, right: 70});

                chart.xAxis.axisLabel("Date")
                        .tickFormat((d) => {
                            return d3.time.format('%x')(new Date(d))
                        });
                chart.x2Axis.tickFormat((d) => {
                    return d3.time.format('%x')(new Date(d))
                });
                chart.yAxis.axisLabel("Interesting Factor")
                        .tickFormat((d) => {
                            if (d == null) {
                                return 'N/A';
                            }
                            return d3.format('.2f')(d);
                        });
                chart.y2Axis.tickFormat((d) => {
                    if (d == null) {
                        return 'N/A';
                    }
                    return d3.format('.2f')(d);
                });

                d3.select(cssSelector).datum(data).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });
        }

        function buildChartScoreBucketRetweetedAndUnreviewed(scoreStats, cssSelector) {
            const data = [{
                values: scoreStats.percentRetweeted,
                key: 'Retweeted'
            }, {
                values: scoreStats.percentUnreviewed,
                key: "Unreviewed",
            }];

            nv.addGraph(() => {
                const chart = nv.models.lineChart()
                                .options({
                                    useInteractiveGuideline : true,
                                    duration: 300,
                                    forceY: [0, 1],
                                    forceX: [0.4, 1]
                                })
                                .color(d3.scale.category10().range());

                chart.xAxis.axisLabel("Interesting Factor")
                        .tickFormat(d3.format('.2f'))
                        .ticks(10);
                chart.yAxis.axisLabel('Percent')
                        .tickFormat((d) => {
                            if (d == null) {
                                return 'N/A';
                            }
                            return d3.format('.2%')(d);
                        })
                        .ticks(4);

                d3.select(cssSelector).datum(data).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });
        }

        function buildChartScoreBucketCounts(scoreStats, cssSelector) {
            const data = [{
                values: scoreStats.retweeted,
                key: "Retweeted",
            }, {
                values: scoreStats.unreviewed,
                key: "Unreviewed",
            }, {
                values: scoreStats.matchesCreated,
                key: 'Created'
            }, {
                values: scoreStats.autoRejected,
                key: "Auto-Rejected"
            }];

            nv.addGraph(() => {
                const chart = nv.models.multiBarChart()
                        .options({
                            duration: 300,
                        })
                        .stacked(true)
                        .color(d3.scale.category10().range())
                        .reduceXTicks(false);

                chart.xAxis.axisLabel("Interesting Factor")
                        .tickFormat(d3.format('.2f'))
                        .tickValues(_.range(0.4, 1.05, 0.05).map(x => Math.round(x * 100) / 100));
                chart.yAxis.axisLabel("Count")
                        .tickFormat(d3.format('i'));
                d3.select(cssSelector).datum(data).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });
        }

        function buildChartTimeOfDayMatchCreatedCounts(timeOfDayStats, cssSelector) {
            const data = [{
                values: timeOfDayStats.unreviewed,
                key: 'Unreviewed',
            }, {
                values: timeOfDayStats.retweeted,
                key: 'Retweeted'
            }, {
                values: timeOfDayStats.matchesCreated,
                key: "Created",
            }, {
                values: timeOfDayStats.adjustedFailedAttemptedApprovals,
                key: 'Failed Attempted Approvals'
            }];
            nv.addGraph(() => {
                const chart = nv.models.multiBarChart()
                        .options({
                            duration: 300
                        })
                        .stacked(true)
                        .color(d3.scale.category10().range())
                        .reduceXTicks(false);

                chart.xAxis.axisLabel("Time")
                        .tickFormat((d) => {
                            return d3.time.format('%I:%M %p')(new Date(d))
                        })
                        .tickValues(_.range(0, 24, 2).map(x => new Date(0).setHours(x)));
                chart.yAxis.axisLabel('Count').tickFormat(d3.format('i'));

                d3.select(cssSelector).datum(data).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });
        }

        function buildChartTimeOfDayMatchCreatedAverageInterestingFactor(timeOfDayStats, cssSelector) {
            const data = [{
                values: timeOfDayStats.averageInterestingFactor,
                key: 'All',
            }, {
                values: timeOfDayStats.attemptedApprovalAverageInterestingFactor,
                key: 'Attempted Approval'
            }, {
                values: timeOfDayStats.rejectedAverageInterestingFactor,
                key: "Rejected",
            }, {
                values: timeOfDayStats.unreviewedAverageInterestingFactor,
                key: 'Unreviewed'
            }];

            nv.addGraph(() => {
                const chart = nv.models.lineChart()
                                .options({
                                    useInteractiveGuideline : true,
                                    duration: 300,
                                    forceY: [0, 1],
                                })
                                .margin({right: 50})
                                .color(d3.scale.category10().range());

                chart.xAxis.axisLabel("Time")
                        .tickFormat((d) => {
                            return d3.time.format('%I:%M %p')(new Date(d))
                        })
                        .tickValues(_.range(0, 24, 2).map(x => new Date(0).setHours(x)));
                chart.yAxis.axisLabel("Interesting Factor")
                        .tickFormat((d) => {
                            if (d == null) {
                                return 'N/A';
                            }
                            return d3.format('.2f')(d);
                        });
                d3.select(cssSelector).datum(data).call(chart);
                nv.utils.windowResize(chart.update);
                return chart;
            });
        }

        function buildChartInterestingFactorDistributionForDay(scoreDistributionStats, cssSelector) {
            const data = [{
                values: scoreDistributionStats.total,
                key: 'Total',
                disabled: true,
            }, {
                values: scoreDistributionStats.unreviewed,
                key: "Unreviewed",
            }, {
                values: scoreDistributionStats.reviewed,
                key: 'Reviewed',
            }, {
                values: scoreDistributionStats.rejected,
                key: 'Rejected',
            }];

            nv.addGraph(() => {
                const chart = nv.models.multiBarChart()
                        .options({
                            duration: 300,
                        })
                        .stacked(true)
                        .margin({right: 50})
                        .color(d3.scale.category10().range());

                chart.xAxis.axisLabel("Interesting Factor").tickFormat(d3.format('.2f'));
                chart.yAxis.axisLabel("Count").tickFormat(d3.format('i'));
                d3.select(cssSelector).datum(data).call(chart);
                nv.utils.windowResize(chart.update);
                window.dispatchEvent(new Event('resize'));
                return chart;
            });
        }

        const $jsCollapseButtons = $(".js-collapse-button");
        $jsCollapseButtons.text("➖");
        $jsCollapseButtons.click(function() {
            $(this).text(function (i, previous) {
                return previous == '➕' ? '➖' : '➕';
            });
        });

        function renderTable($template, $target, data) {
            const template = Handlebars.compile($template.html());
            const html = template({rows: data});
            $target.html(html);
        }

        HandlebarsIntl.registerWith(Handlebars);

        const byDayMatchPosted = buildStatsByDateMatchPosted();
        buildChartRetweetsAndTumblrPostsByDay(byDayMatchPosted.series, '#retweets-and-tumblr-posts-by-day-chart');

        const byDayMatchCreated = buildStatsByDateMatchCreated();
        buildChartRetweetedAndUnreviewedByDateMatchCreated(byDayMatchCreated.series, '#percent-reviewed-unreviewed-by-date-created-chart');
        buildChartDateMatchCreatedPercentApprovalFailure(byDayMatchCreated.series, '#percent-approval-failure-by-date-created-chart');
        buildChartDateMatchCreatedCounts(byDayMatchCreated.series, '#counts-by-date-created-chart');
        buildChartDayMatchCreatedAverageInterestingFactor(byDayMatchCreated.series, '#average-interesting-factor-by-action-taken-chart');

        const byScoreBucket = buildStatsByScoreBucket();
        buildChartScoreBucketRetweetedAndUnreviewed(byScoreBucket.series, '#reviewed-unreviewed-by-score-bucket-chart');
        buildChartScoreBucketCounts(byScoreBucket.series, '#totals-by-score-bucket-chart');

        const byTimeOfDayMatchCreated = buildStatsByTimeOfDayMatchCreated();
        buildChartTimeOfDayMatchCreatedCounts(byTimeOfDayMatchCreated.series, '#totals-by-time-of-day-match-created-chart');
        buildChartTimeOfDayMatchCreatedAverageInterestingFactor(byTimeOfDayMatchCreated.series, '#average-interesting-factor-by-time-of-day-match-created-chart');

        renderTable($("#retweets-and-tumblr-posts-by-day-table-template"),
                    $("#retweets-and-tumblr-posts-by-day-table"), byDayMatchPosted.stats);

        renderTable($("#stats-by-date-created-table-template"),
                    $("#stats-by-date-created-table"), byDayMatchCreated.stats);

        renderTable($("#stats-by-score-table-template"),
                    $("#stats-by-score-table"), byScoreBucket.stats);

        renderTable($("#stats-by-time-of-day-match-created-table-template"),
                    $("#stats-by-time-of-day-match-created-table"), byTimeOfDayMatchCreated.stats);

        $(".js-sticky-header").stickyTableHeaders();

        $("#interesting-factors-for-day-chart-modal").on('shown.bs.modal', function () {
            // trigger nvd3 to redraw chart once it's visible
            window.dispatchEvent(new Event('resize'));
        });

        $("[data-show-interesting-factor-distrubution]").click(e => {
            $.blockUI({message: '<h4>Loading...</h4>'});
            const dateString = $(e.target).data("match-created");
            const encodedDateString = encodeURIComponent(dateString);
            $.getJSON(`/anagrams/interestingfactorsforday/${encodedDateString}`).done(data => {
                if (data.error) {
                    $.growl.error({message: data.error});
                } else if (data.interestingFactors) {
                    const scores = data.interestingFactors.map(x => new InterestingFactorsForDay(x));
                    const series = new InterestingFactorsForDaySeriesCollection(scores);
                    buildChartInterestingFactorDistributionForDay(series, '#interesting-factors-for-day-chart');

                    $("#interesting-factors-for-day-chart-modal-title").text(data.date);
                    $("#interesting-factors-for-day-chart-modal").modal();
                }
            }).fail((jqxhr, textStatus, error) => {
                $.growl.error({message: error});
            }).always(() => {
                $.unblockUI();
            });

            return false;
        });

        $("[data-fraction-digits]").on("input", e => {
            const $input = $(e.target);
            const asNum = parseFloat($input.val());
            const numFractionDigits = $input.data("fraction-digits");
            if (asNum && numFractionDigits) {
                $input.val(asNum.toFixed(numFractionDigits))
            }
        }).trigger("input");

        const $exactTweetPopover = $("#exact-tweet-popover");
        $exactTweetPopover.popover();
        $exactTweetPopover.on('show.bs.popover', function () {
            $.getJSON(`/anagrams/exacttweetcount`).done(data => {
                if (data.error) {
                    $.growl.error({message: data.error});
                } else if (data.count) {
                    $("#exact-tweet-number").text(Number(data.count).toLocaleString());
                }
            }).fail((jqxhr, textStatus, error) => {
                $.growl.error({message: error});
            });
        });
    });

</script>
<style type="text/css">
    .tableFloatingHeaderOriginal th {
        background-color: #fff;
        border-bottom: 1px solid #DDD;
    }

    .popover-content {
        text-align: center
    }
</style>
